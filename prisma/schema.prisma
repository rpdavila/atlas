datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum RentStatus {
  Available
  Rented
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  // user profile
  profile       Profile?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Profile {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @unique @db.ObjectId
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  schools     School[]
  students    Student[]
  instruments Instrument[]
  district    District?    @relation(fields: [districtId], references: [id], onDelete: Cascade)
  role        String
  districtId  String?      @db.ObjectId
}

model School {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  districtId            String?                @db.ObjectId
  name                  String
  district              District?              @relation(fields: [districtId], references: [id])
  instruments           Instrument[]
  profile               Profile?               @relation(fields: [profileId], references: [id])
  profileId             String?                @db.ObjectId
  students              Student[]
  instrumentAssignments InstrumentAssignment[]
}

model District {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  state       String
  schools     School[]
  instruments Instrument[]
  profile     Profile[]
  profileId   String?      @unique @db.ObjectId
}

model Student {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  schoolId             String?               @db.ObjectId
  firstName            String
  lastName             String
  studentIdNumber      String
  instrumentAssignment InstrumentAssignment?
  // relations
  school               School?               @relation(fields: [schoolId], references: [id])
  Profile              Profile?              @relation(fields: [profileId], references: [id])
  profileId            String?               @db.ObjectId
}

model Instrument {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  districtId           String                @db.ObjectId
  schoolId             String                @db.ObjectId
  classification       String
  brand                String
  serialNumber         String
  rentStatus           RentStatus
  instrumentAssignment InstrumentAssignment?
  // relations
  school               School                @relation(fields: [schoolId], references: [id])
  district             District              @relation(fields: [districtId], references: [id])
  Profile              Profile?              @relation(fields: [profileId], references: [id], onDelete: SetNull)
  profileId            String?               @db.ObjectId
}

model InstrumentAssignment {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  studentId    String     @unique @db.ObjectId
  instrumentId String     @unique @db.ObjectId
  schoolId     String     @db.ObjectId
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  school       School?    @relation(fields: [schoolId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
